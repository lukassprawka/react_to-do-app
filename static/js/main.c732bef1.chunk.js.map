{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TasksList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","checked","date","Date","toISOString","slice","handleChange","e","type","target","value","setState","handleClick","preventDefault","length","props","add","console","log","maxDate","this","className","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","toLocaleString","TasksList","tasks","filter","sort","a","b","toLowerCase","done","activeTasks","map","key","doneTasks","fontSize","App","counter","addTask","prevState","deleteTask","changeTaskStatus","forEach","getTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TA0EeA,G,iNAtEbC,MAAQ,CACNC,KAAM,GACNC,SAAS,EACTC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,EAAG,K,EAG1CC,aAAe,SAACC,GACd,IAAMC,EAAOD,EAAEE,OAAOD,KACtB,GAAa,SAATA,GAA4B,SAATA,EAAiB,CACtC,IAAME,EAAQH,EAAEE,OAAOC,MACvB,EAAKC,UAAS,iCACXH,EAAOE,WAEL,GAAa,aAATF,EAAqB,CAC9B,IAAMP,EAAUM,EAAEE,OAAOR,QACzB,EAAKU,UAAS,iBAAO,CACnBV,gB,EAKNW,YAAc,SAACL,IACbA,EAAEM,iBACE,EAAKd,MAAMC,KAAKc,OAAS,GACf,EAAKC,MAAMC,IAAI,EAAKjB,MAAMC,KAAM,EAAKD,MAAMG,KAAM,EAAKH,MAAME,UAEtE,EAAKU,UAAS,iBAAO,CACnBX,KAAM,GACNC,SAAS,MAIbgB,QAAQC,IAAI,uB,wEAKd,IAAMC,EAAwC,EAA9BC,KAAKrB,MAAMG,KAAKG,MAAM,EAAG,GAAS,EAAI,SAEtD,OACE,0BAAMgB,UAAU,QACd,2BACEb,KAAK,OACLc,YAAY,gBACZZ,MAAOU,KAAKrB,MAAMC,KAClBuB,SAAUH,KAAKd,eAEjB,2BACEE,KAAK,WACLgB,GAAG,YACHvB,QAASmB,KAAKrB,MAAME,QACpBsB,SAAUH,KAAKd,eAEjB,2BAAOmB,QAAQ,aAAf,aACA,6BACA,2BAAOA,QAAQ,QAAf,wBACA,2BACEjB,KAAK,OACLE,MAAOU,KAAKrB,MAAMG,KAClBwB,IAAKN,KAAKrB,MAAMG,KAChByB,IAAKR,EACLI,SAAUH,KAAKd,eAEjB,6BACA,4BAAQsB,QAASR,KAAKR,aAAtB,c,GAjEciB,cC6BPC,EA9BF,SAACf,GACZ,IADsB,EAKoCA,EAAMgB,KAAxD/B,EALc,EAKdA,KAAME,EALQ,EAKRA,KAAMsB,EALE,EAKFA,GAAIQ,EALF,EAKEA,OAAQC,EALV,EAKUA,UAAWC,EALrB,EAKqBA,WAE3C,OAAIF,EAEA,6BACE,2BACE,4BAAQG,MAAOF,EAVT,CACZG,MAAO,OASkC,MAAOpC,GAD5C,SACgE,8BAAOE,EAAP,KAC9D,4BAAQ0B,QAAS,kBAAMb,EAAMsB,OAAOb,KAApC,yBACA,4BAAQI,QAAS,kBAAMb,EAAMuB,OAAOd,KAApC,OAMJ,6BACE,2BACE,gCAASxB,GACT,gDAAiBE,EAAjB,KACA,6BAHF,6BAGkC,8BAAO,IAAIC,KAAK+B,GAAYK,iBAA5B,KAChC,4BAAQX,QAAS,kBAAMb,EAAMuB,OAAOd,KAApC,QCeKgB,MAtCf,SAAmBzB,GACjB,IAAMiB,EAASjB,EAAM0B,MAAMC,QAAO,SAACX,GAAD,OAAUA,EAAKC,UACjDA,EAAOW,MAAK,SAACC,EAAGC,GAGd,OAFAD,EAAIA,EAAE5C,KAAK8C,gBACXD,EAAIA,EAAE7C,KAAK8C,eACO,EACdF,EAAIC,GAAW,EACZ,KAET,IAAME,EAAOhC,EAAM0B,MAAMC,QAAO,SAACX,GAAD,OAAWA,EAAKC,UAChDe,EAAKJ,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEX,WAAaU,EAAEV,cACrC,IAAMc,EAAchB,EAAOiB,KAAI,SAAClB,GAAD,OAC7B,kBAAC,EAAD,CAAMmB,IAAKnB,EAAKP,GAAIO,KAAMA,EAAMO,OAAQvB,EAAMuB,OAAQD,OAAQtB,EAAMsB,YAEhEc,EAAYJ,EAAKE,KAAI,SAAClB,GAAD,OACzB,kBAAC,EAAD,CAAMmB,IAAKnB,EAAKP,GAAIO,KAAMA,EAAMO,OAAQvB,EAAMuB,OAAQD,OAAQtB,EAAMsB,YAGtE,OACE,oCACE,yBAAKhB,UAAU,UACb,sDACC2B,EAAYlC,OAAS,EAAIkC,EAAc,sDAE1C,6BACA,yBAAK3B,UAAU,UACb,gDACmB,gCAAM0B,EAAKjC,OAAX,MAElBiC,EAAKjC,OAAS,GACb,0BAAMqB,MAAO,CAAEiB,SAAU,KAAzB,0DAEDD,EAAU9C,MAAM,EAAG,MCsEbgD,E,2MAnGbC,QAAU,E,EAEVvD,MAAQ,CACN0C,MAAO,CACL,CACEjB,GAAI,EACJxB,KAAM,yCACNE,KAAM,aACN+B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJxB,KAAM,4BACNE,KAAM,aACN+B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJxB,KAAM,qBACNE,KAAM,aACN+B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJxB,KAAM,0BACNE,KAAM,aACN+B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJxB,KAAM,WACNE,KAAM,aACN+B,WAAW,EACXD,QAAQ,EACRE,WAAY,Q,EAKlBqB,QAAU,SAACvD,EAAME,EAAM+B,GACrB,IAAMF,EAAO,CACXP,GAAI,EAAK8B,QACTtD,OACAE,OACA+B,YACAD,QAAQ,EACRE,WAAY,MAOd,OALA,EAAKoB,UAEL,EAAK3C,UAAS,SAAC6C,GAAD,MAAgB,CAC5Bf,MAAM,GAAD,mBAAMe,EAAUf,OAAhB,CAAuBV,SAEvB,G,EAGT0B,WAAa,SAACjC,GACZ,IAAMiB,EAAQ,EAAK1C,MAAM0C,MAAMC,QAAO,SAACX,GAAD,OAAUA,EAAKP,KAAOA,KAC5D,EAAKb,UAAS,iBAAO,CACnB8B,a,EAIJiB,iBAAmB,SAAClC,GAClB,IAAMiB,EAAK,YAAO,EAAK1C,MAAM0C,OAC7BA,EAAMkB,SAAQ,SAAC5B,GACTA,EAAKP,KAAOA,IACdO,EAAKC,QAAS,EACdD,EAAKG,YAAa,IAAI/B,MAAOyD,cAGjC,EAAKjD,UAAS,iBAAO,CACnB8B,a,wEAKF,OACE,yBAAKpB,UAAU,OACb,wCACA,kBAAC,EAAD,CAASL,IAAKI,KAAKmC,UACnB,kBAAC,EAAD,CACEd,MAAOrB,KAAKrB,MAAM0C,MAClBH,OAAQlB,KAAKqC,WACbpB,OAAQjB,KAAKsC,wB,GA7FL7B,aCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c732bef1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n  state = {\r\n    text: '',\r\n    checked: false,\r\n    date: new Date().toISOString().slice(0, 10),\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const type = e.target.type;\r\n    if (type === 'text' || type === 'date') {\r\n      const value = e.target.value;\r\n      this.setState(() => ({\r\n        [type]: value,\r\n      }));\r\n    } else if (type === 'checkbox') {\r\n      const checked = e.target.checked;\r\n      this.setState(() => ({\r\n        checked,\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.text.length > 2) {\r\n      const add = this.props.add(this.state.text, this.state.date, this.state.checked);\r\n      if (add) {\r\n        this.setState(() => ({\r\n          text: '',\r\n          checked: false,\r\n        }));\r\n      }\r\n    } else {\r\n      console.log('za krótka nazwa');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const maxDate = this.state.date.slice(0, 4) * 1 + 1 + '-12-31';\r\n\r\n    return (\r\n      <form className='form'>\r\n        <input\r\n          type='text'\r\n          placeholder='dodaj zadanie'\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input\r\n          type='checkbox'\r\n          id='important'\r\n          checked={this.state.checked}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor='important'>Priorytet</label>\r\n        <br />\r\n        <label htmlFor='date'>Do kiedy zrobić</label>\r\n        <input\r\n          type='date'\r\n          value={this.state.date}\r\n          min={this.state.date}\r\n          max={maxDate}\r\n          onChange={this.handleChange}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: 'red',\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <em> (zrobić do {date})</em>\r\n          <br />- potwierdzenie wykonania <span>{new Date(finishDate).toLocaleString()} </span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport Task from './Task';\r\n\r\nfunction TasksList(props) {\r\n  const active = props.tasks.filter((task) => task.active);\r\n  active.sort((a, b) => {\r\n    a = a.text.toLowerCase();\r\n    b = b.text.toLowerCase();\r\n    if (a > b) return 1;\r\n    if (a < b) return -1;\r\n    return 0;\r\n  });\r\n  const done = props.tasks.filter((task) => !task.active);\r\n  done.sort((a, b) => b.finishDate - a.finishDate);\r\n  const activeTasks = active.map((task) => (\r\n    <Task key={task.id} task={task} delete={props.delete} change={props.change} />\r\n  ));\r\n  const doneTasks = done.map((task) => (\r\n    <Task key={task.id} task={task} delete={props.delete} change={props.change} />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className='active'>\r\n        <h1>Zadannnia do zrobienia</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Nie masz nic do roboty</p>}\r\n      </div>\r\n      <hr />\r\n      <div className='active'>\r\n        <h3>\r\n          Zadania zrobione <em>({done.length})</em>\r\n        </h3>\r\n        {done.length > 5 && (\r\n          <span style={{ fontSize: 10 }}>wyświetlone jest jedynie 5 ostatnich elementów</span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TasksList;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TasksList from './TasksList';\n\nclass App extends Component {\n  counter = 5;\n\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'zagrać w Divinity: Original Sin 2',\n        date: '2019-11-12',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: 'zrobić dobry uczynek',\n        date: '2020-11-12',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: 'pokalować dom',\n        date: '2020-11-09',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: 'schudnąć 5 kg',\n        date: '2020-11-12',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 4,\n        text: 'fryzjer!',\n        date: '2020-01-07',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n    ],\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n    // const tasks = this.state.tasks.filter((task) => task.id !== id);\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n    return true;\n  };\n\n  deleteTask = (id) => {\n    const tasks = this.state.tasks.filter((task) => task.id !== id);\n    this.setState(() => ({\n      tasks,\n    }));\n  };\n\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState(() => ({\n      tasks,\n    }));\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>TODO APP</h1>\n        <AddTask add={this.addTask} />\n        <TasksList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}